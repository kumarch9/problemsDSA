package main

import "math"

//Subarray with given sum
func Subarraywithgivensum(A []int, B int) []int {
	n := len(A)
	i, j := 0, 0
	if A == nil {
		return []int{-1}
	}
	sum := A[0]
	ans := []int{}
	rangeI := -1
	rangeJ := -1
	for j < n && i < n {
		if sum == B {
			rangeI = i
			rangeJ = j
			break
		} else if sum < B {
			j++
			if j < n {
				sum += A[j]
			}

		} else if sum > B {
			sum -= A[i]
			i++
		}
	}
	if rangeI != -1 && rangeJ != -1 {
		for x := rangeI; x <= rangeJ; x++ {
			ans = append(ans, A[x])
		}
	} else {
		return append(ans, -1)
	}
	return ans
}

// Container With Most Water
func ContainerWithMostWater(A []int) int {
	n := len(A)
	i := 0
	j := n - 1
	ans := 0
	area := 0
	for i < j {
		area = A[i] * (j - i)
		if A[j] < A[i] {
			area = A[j] * (j - i)
		}

		if area > ans {
			ans = area
		}
		if A[i] < A[j] {
			i++
		} else {
			j--
		}

	}
	return ans
}

// Pairs with given sum II
func PairswithgivensumII(A []int, B int) int {
	count := 0
	left := 0
	right := len(A) - 1
	for left < right {
		currentSum := A[left] + A[right]
		if currentSum == B {
			if A[left] == A[right] {
				frequency := right - left + 1
				count += ((frequency * (frequency - 1)) / 2) % 1000000007
				break
			}
			leftCount := 1
			rightCount := 1
			for left+1 < right && A[left] == A[left+1] {
				leftCount += 1
				left += 1
			}
			for right-1 > left && A[right] == A[right-1] {
				rightCount += 1
				right -= 1
			}
			count += (leftCount * rightCount) % 1000000007
			left += 1
			right -= 1
		} else if currentSum < B {
			left += 1
		} else {
			right -= 1
		}
	}
	return count % 1000000007
}

// Array 3 Pointers
func Array3Pointers(A []int, B []int, C []int) int {
	diff := math.MaxInt32
	p, q, r := len(A), len(B), len(C)
	res_i, res_j, res_k := 0, 0, 0
	i, j, k := 0, 0, 0
	for i < p && j < q && k < r {
		minimum := min(A[i], min(B[j], C[k]))
		maximum := max(A[i], max(B[j], C[k]))
		if maximum-minimum < diff {
			res_i, res_j, res_k = i, j, k
			diff = maximum - minimum
		}
		if diff == 0 {
			break
		}
		if A[i] == minimum {
			i++
		} else if B[j] == minimum {
			j++
		} else {
			k++
		}
	}
	ansItoJ := math.Abs(float64(A[res_i]) - float64(B[res_j]))
	ansJtoK := math.Abs(float64(B[res_j]) - float64(C[res_k]))
	ansKtoI := math.Abs(float64(C[res_k]) - float64(A[res_i]))
	ans := max(int(ansItoJ), max(int(ansJtoK), int(ansKtoI)))
	return ans
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}
func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

func main() {

}
