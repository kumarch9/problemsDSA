#include <stdio.h>
#include <vector>
using namespace std;
// Allocate Books
bool isPlace(vector<int> &P, int M, int thresold){
    int n = P.size();
    int k = 1, pages=0;
    for(int i=0; i<n; i++){
        pages += P[i];
        if(pages > thresold){
            pages = 0;
            k += 1;
            i -= 1;
            if(k > M){
                return false;
            }
        }
    }
    return true;
}
int books(vector<int> &A, int B) {
    if(B > A.size())
    {   
        return -1;

    } 
    int l=0,r=0,ans=-1,n=A.size(); 
    for(int i=0;i<A.size();i++)
    {   
        r += A[i];
    }
    while(l<=r){
        int mid = (l+r)/2;         
        if(isPlace(A,B,mid)){
            ans = mid;
            r = mid - 1;
        }
        else{
            l = mid + 1;
        }
    }
    return ans;
}


//Special Integer
int SpecialInteger(vector<int> &A, int B) {
    int n = A.size();
    int ans = n; 
    int sum = 0; 
    int start = 0; 
    for (int end = 0; end < n; end++) 
    { 
        // Sliding window from left 
        sum += A[end]; 
        while (sum > B) { 
            // Sliding window from right 
            sum -= A[start]; 
            start++;
            ans = min(ans, end - start + 1); 
            if (sum == 0) 
                break; 
        } 
        if (sum == 0) { 
            ans = 0; 
            break; 
        } 
    } 
    return ans;
}


// Median of Array
double findMedianSortedArrays(const vector<int> &A, const vector<int> &B) {
       int n = A.size();
    int m = B.size();
    if (n > m)
        return findMedianSortedArrays(B, A); // Swapping to make A smaller
 
    int start = 0;
    int end = n;
    int realmidinmergedarray = (n + m + 1) / 2; 
    while (start <= end) {
        int mid = (start + end) / 2;
        int leftAsize = mid;
        int leftBsize = realmidinmergedarray - mid;
        int leftA = (leftAsize > 0) ? A[leftAsize - 1]: INT_MIN; // checking overflow of indices
        int leftB
            = (leftBsize > 0) ? B[leftBsize - 1] : INT_MIN;
        int rightA
            = (leftAsize < n) ? A[leftAsize] : INT_MAX;
        int rightB
            = (leftBsize < m) ? B[leftBsize] : INT_MAX; 
        // if correct partition is done
        if (leftA <= rightB and leftB <= rightA) {
            if ((m + n) % 2 == 0)
                return (max(leftA, leftB)
                        + min(rightA, rightB))
                       / 2.0;
            return max(leftA, leftB);
        }
        else if (leftA > rightB) {
            end = mid - 1;
        }
        else
            start = mid + 1;
    }
    return 0.0;
}


////Find Smallest Again
bool isPossible(vector<int> &A, int mid, int B){
    
    int n = A.size();
    int cnt = 0;
    for (int i = 0; i < n; i++){
        for (int j = i+1; j < n; j++){
            int val = mid - (A[i] + A[j]);
            if (val <= 0)
                break;
            auto it = lower_bound(A.begin(), A.end(), val);
            if (it == A.begin())
                continue;
            it--;
            int idx = it - A.begin();
            if (idx > j)
                cnt += idx - j;
        }
    }
    if (cnt < B)
        return true;
    return false;
}
int FindSmallestAgain(vector<int> &A, int B) {
    int n = A.size();
    sort(A.begin(), A.end());
    int low = 1, high = INT_MAX;
    
    while (low <= high){
        int mid = low + ((high-low)/2);
        if (isPossible(A, mid, B))
            low = mid + 1;
        else
            high = mid - 1;
    }    
    return high;
}


// MatrixMedian
int countSmallerThanMid(vector<int> &row, int mid)
{
  int l = 0, h = row.size() - 1;
  while (l <= h)
  {
    int md = (l + h) >> 1;
    if (row[md] <= mid)
    {
      l = md + 1;
    }
    else
    {
      h = md - 1;
    }
  }
  return l;
}
int  MatrixMedian(vector<vector<int> > &A) {
  int low = 1;
  int high = 1e9;
  int n = A.size();
  int m = A[0].size();
  while (low <= high)
  {
    int mid = (low + high) >> 1;
    int cnt = 0;
    for (int i = 0; i < n; i++)
    {
      cnt += countSmallerThanMid(A[i], mid);
    }
    if (cnt <= (n * m) / 2)
      low = mid + 1;
    else
      high = mid - 1;
  }
  return low;
}

